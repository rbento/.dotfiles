"//////////////////////////////////////////////////////////////////////////////
"// globals
"//////////////////////////////////////////////////////////////////////////////

set nocompatible
filetype off
colorscheme habamax
syntax on

"//////////////////////////////////////////////////////////////////////////////
"// vim options
"//////////////////////////////////////////////////////////////////////////////

set autochdir
set autoindent
set autoread
set backspace=indent,eol,start
set clipboard=unnamed
set cmdheight=1
set encoding=utf-8
set expandtab
set hidden
set hlsearch
set ignorecase
set incsearch
set noswapfile
set notimeout
set nowrap
set number
set path+=**
set relativenumber
set ruler
set scrolloff=5
set shiftwidth=4
set showcmd
set smartcase
set smartcase
set smartindent
set smarttab
set softtabstop=4
set splitbelow
set splitright
set t_vb=
set tabstop=4
set ttimeout
set wildignore+=*/tmp/*,*/target/*,*/bin/*,*/build/*,*/__pycache__/*,*.tar,*.gz,*.7z,*.iso,*.so,*.swp,*.zip     
set wildmenu
set wildmode=list:longest,full

"//////////////////////////////////////////////////////////////////////////////
"// gvim options
"//////////////////////////////////////////////////////////////////////////////

set guifont=Hack:h14 " Font
set guioptions-=m    " Menubar
set guioptions-=T    " Toolbar
set guioptions-=r    " Scrollbar

"//////////////////////////////////////////////////////////////////////////////
"// statusline
"//////////////////////////////////////////////////////////////////////////////

set laststatus=2                             " Show status bar
set statusline=                              " Clear the statusline for when vimrc is reloaded
set statusline+=\ %-3.3n\                    " Buffer number
set statusline+=%f\                          " File name
set statusline+=%h%m%r%w                     " Flags
set statusline+=[%{strlen(&ft)?&ft:'none'},  " Filetype
set statusline+=%{strlen(&fenc)?&fenc:&enc}, " Encoding
set statusline+=%{&fileformat}]              " File format
set statusline+=%=                           " Right align
set statusline+=%c,                          " Cursor column
set statusline+=%l/%L\                       " Cursor line/total lines
set statusline+=%b,0x%-2B\                   " Current char
set statusline+=%<%P\                        " Percentage

" statusline changes according to mode
if version >= 700
  au InsertEnter * hi StatusLine term=reverse ctermfg=0 ctermbg=144
  au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=247
endif

"//////////////////////////////////////////////////////////////////////////////
"// custom cursor
"//////////////////////////////////////////////////////////////////////////////

let &t_SI.="\e[5 q"
let &t_SR.="\e[4 q"
let &t_EI.="\e[1 q"

"//////////////////////////////////////////////////////////////////////////////
"// custom mappings
"//////////////////////////////////////////////////////////////////////////////

" configure command leader
let mapleader=","

" fzf list buffers
map <leader>b :Buffers<CR>

" fzf show commits
map <leader>c :Commits<CR>

" duplicate current line
map <leader>d Yp

" open fuzzy file finder
map <leader>f :Files<CR>

" indent whole file
map <leader>F maggVG='a

" find/grep in current file if opened or in all files
map <leader>g :Rg 

" prepare search on the current line
map <leader>h :nohl<CR>

" reload current file / undo all changes
map <leader>l :e!<CR>

" fzf show current marks
map <leader>m :Marks<CR>

" jump to next compiler error
map <leader>n :cn<CR>

" jump to previous compiler error
map <leader>p :cp<CR>

" close current buffer
map <leader>q :bd<CR>

" prepare for search/replace on the whole file
map <leader>R :%s/

" prepare for search/replace on the current line
map <leader>r V:s/

" prepare incremental search forward 
map <leader>i :/

" save / overwrite
map <leader>w :w!<CR>

" quit without saving
map <silent> <leader>x :q!<CR>

" switch buffers
nnoremap <silent> H :bp<CR>
nnoremap <silent> L :bn<CR> 

" quick ex mode
noremap ; :

" move into wrapped lines and keeps cursor centered
nnoremap j gjzz
nnoremap k gkzz

" open fuzzy file history
map <leader>H :History<CR>
map <F2> :History<CR>

" open fuzzy git file finder
map <leader>t :GFiles<CR>
map <F3> :GFiles<CR>

" delete current buffer
map <F4> :bd<CR>

" execute make on the current directory
map <F5> :make<CR>

" list buffers
map <leader>e :Buffers<CR>
map <F6> :Buffers<CR>

" jump to next compiler error
map <F8> :cn<CR>

" jump to previous compiler error
map <S-F8> :cp<CR>

" previous buffer
map <F9> :bp<CR>

" next buffer
map <F10> :bn<CR>

"//////////////////////////////////////////////////////////////////////////////
"// plugins
"//////////////////////////////////////////////////////////////////////////////

call plug#begin()

" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'

" Make sure you use single quotes

" fzf native plugin
Plug 'junegunn/fzf'

" fzf.vim
Plug 'junegunn/fzf.vim'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()

"//////////////////////////////////////////////////////////////////////////////
"// plugin settings
"//////////////////////////////////////////////////////////////////////////////

" configure fzf
let g:fzf_vim = {}
let g:fzf_vim.preview_bash = 'C:\cygwin64\bin\bash.exe'
let g:fzf_vim.buffers_jump = 1
let g:fzf_vim.commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_vim.tags_command = 'ctags -R'
"
" configure the silver searcher
let g:ackprg = 'ag --vimgrep'
