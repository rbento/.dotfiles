
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" global options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible
" filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" vim options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autochdir
set autoindent
set autoread
set backspace=indent,eol,start
set cindent
set clipboard=unnamed
set cmdheight=1
set encoding=utf-8
set expandtab
set gp=git\ grep\ -n
set hidden
set hlsearch
set ignorecase
set incsearch
set mouse=a
set noerrorbells visualbell t_vb=
set noswapfile
set notimeout
set nowrap
set number
set ruler
set shell=/opt/homebrew/bin/bash
set shiftwidth=4
set showcmd
set smartcase
set smarttab
set softtabstop=4
set splitbelow
set splitright
set t_vb=
set tabstop=4
set tags=./tags,tags
set ttimeout
set wildignore+=*/tmp/*,*/target/*,*/bin/*,*/build/*,*/__pycache__/*,*.tar,*.gz,*.7z,*.iso,*.so,*.swp,*.zip     
set wildmenu
set wildoptions=pum
set wildmode=list:longest,full

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" gui options (gvim, macvim)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set guifont=Hack:h15 " Font
set guioptions-=m    " Menubar
set guioptions-=T    " Toolbar
set guioptions-=r    " Scrollbar

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" statusline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set laststatus=2                             " Show status bar
set statusline=                              " Clear the statusline for when vimrc is reloaded
set statusline+=\ %-3.3n\                    " Buffer number
set statusline+=%f\                          " File name
set statusline+=%h%m%r%w                     " Flags
set statusline+=[%{strlen(&ft)?&ft:'none'},  " Filetype
set statusline+=%{strlen(&fenc)?&fenc:&enc}, " Encoding
set statusline+=%{&fileformat}]              " File format
set statusline+=%=                           " Right align
set statusline+=%c,                          " Cursor column
set statusline+=%l/%L\                       " Cursor line/total lines

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vim-Plug
call plug#begin()

" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'

" Make sure you use single quotes

" fzf native plugin
Plug 'junegunn/fzf'

" fzf.vim
Plug 'junegunn/fzf.vim'

" Initialize plugin system
" Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" fzf
let g:fzf_vim = {}
let g:fzf_vim.preview_bash = '/opt/homebrew/bin/bash'
" let g:fzf_vim.preview_bash = 'C:\Program Files\Git\bin\bash.exe'
let g:fzf_vim.buffers_jump = 1
let g:fzf_vim.commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_vim.tags_command = 'ctags -R'

" the silver searcher
let g:ackprg = 'ag --vimgrep'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" custom variables
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:termdebugger='/opt/homebrew/bin/gdb'

let g:normal_bg = ''
let g:normal_fg = ''
let g:status_line_bg = ''
let g:status_line_fg = ''

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" custom functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! OnColorSchemeChanged()
    let g:normal_bg = synIDattr(hlID('Normal'), 'bg#')
    let g:normal_fg = synIDattr(hlID('Normal'), 'fg#')
    let g:status_line_bg = synIDattr(hlID('StatusLine'), 'bg#')
    let g:status_line_fg = synIDattr(hlID('StatusLine'), 'fg#')
    if mode() == 'i'
        execute 'hi Cursor guibg=' . g:normal_fg . ' guifg=' . g:normal_bg
        execute 'hi StatusLine guibg=' . g:status_line_bg . ' guifg=' . g:status_line_fg
    else
        execute 'hi Cursor guibg=red guifg=black'
    endif    
endfunction

function! SetMarkAtCurrentLine()
    let l:letters = 'abcdefghijklmnopqrstuvwxyz'
    let l:current_line = line('.')
    " check if the current line already has a mark
    for l:letter in split(l:letters, '\zs')
        if getpos("'" . l:letter)[1] == l:current_line
            echo "Mark " . l:letter . " already set at line " . l:current_line 
            return
        endif
    endfor
    " find an unused mark
    for l:letter in split(l:letters, '\zs')
        if getpos("'" . l:letter)[1] == 0  " mark is unused if line == 0
            execute "mark " . l:letter
            echo "Mark " . l:letter . " set at line " . l:current_line 
            return
        endif
    endfor
    echo "No unused marks available"
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" custom automation
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup AutoSave
    au!
    au BufLeave,FocusLost * silent! write
augroup END

augroup ColorSchemeChanges
    au!
    au ColorScheme * call OnColorSchemeChanged()
augroup END

augroup ModeChanges
    au!
    " set cursor color
    au InsertEnter * execute 'hi Cursor guibg=' . g:normal_fg . ' guifg=' . g:normal_bg
    au InsertLeave * hi Cursor guibg=red guifg=black
    " set statusline color
    au InsertEnter * hi StatusLine guibg=red guifg=black
    au InsertLeave * execute 'hi StatusLine  guibg=' . g:status_line_bg . ' guifg=' . g:status_line_fg
augroup END

augroup VimStartup
    au!
    au GUIEnter * set visualbell t_vb=
    au VimEnter * packadd termdebug
    au VimEnter * call OnColorSchemeChanged()
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" custom settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set default working directory
cd $HOME/Workspace                    
" cd %USERPROFILE%/Workspace

" set default colorscheme
silent! colorscheme industry
syntax on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" custom key mappings
"'""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" quick ex mode
noremap ; :

" move into wrapped lines and keeps cursor centered
nnoremap j gjzz
nnoremap k gkzz

" clear the search buffer when hitting return
nnoremap <space><cr> :nohlsearch<cr>

" configure command leader
let mapleader=","

" go to last edit location 
nnoremap <leader>. g;

" go to last edit location in insert mode 
nnoremap <leader>; gi

" list buffers
nnoremap <leader>b :ls<CR>
nnoremap <leader>e :Buffers<CR>

" show commits
nnoremap <leader>c :Commits<CR>

" file search
nnoremap <leader>f :Files<CR>

" find/grep in current file if opened or in all files
nnoremap <leader>g :Rg<CR>

" view current marks
nnoremap <leader>M :Marks<CR>

" view current jumps
nnoremap <leader>J :Jumps<CR>

" project file search
nnoremap <leader>t :GFiles<CR>

" view current windows
nnoremap <leader>W :Windows<CR>

" duplicate current line
nnoremap <leader>d Yp

" indent whole file
nnoremap <leader>L maggVG='a

" prepare search on the current line
nnoremap <leader>h :nohl<CR>

" close current buffer
nnoremap <leader>q :bd<CR>

" prepare for searc h/replace on the whole file
nnoremap <leader>R :%s/

" prepare for search/replace on the current line
nnoremap <leader>r V:s/

" prepare incremental search forward 
nnoremap <leader>j :/

" save / overwrite
nnoremap <leader>s :w!<CR>

" quit without saving
nnoremap <silent> <leader>x :q!<CR>

" switch buffers
nnoremap <silent> H :bp<CR>
nnoremap <silent> L :bn<CR> 

" switch headerimpl
nnoremap <leader>k,o e %<.cpp<CR>

" sort selection
nnoremap <leader>so :sort<CR>

" quit without saving
nnoremap <silent> <leader>xx :q!<CR>

" cycle windows
nnoremap <leader>w <C-w>w

" close quickfix window
nnoremap <leader><esc> :cclose<CR>

" close current window
nnoremap <S-ESC> :close<CR>

" view help
nnoremap <F1> :Help<CR>

" view history
nnoremap <F3> :History<CR>

" delete current buffer
nnoremap <F4> :bd<CR>

" execute make run on the current directory
nnoremap <F5> :!make debug<CR>

" execute make run on the current directory
nnoremap <F6> :!make run<CR>

" execute make on the current directory
nnoremap <F7> :cclose<CR>:cexpr []<CR>:make<CR>
nnoremap <D-F7> :cclose<CR>:make clean<CR>:cexpr []<CR>:make<CR>

" open quickfix window
nnoremap <D-F8> :cw<CR>

" jump to next compiler error
nnoremap <F8> :cn<CR>

" jump to previous compiler error
nnoremap <S-F8> :cp<CR>

" reload current file / undo all changes
nnoremap <S-F12> :e!<CR>

" set random mark at current buffer line
nnoremap <leader>mm :call SetMarkAtCurrentLine()<CR>

" show marks
nnoremap <leader>ml :Marks<CR>

" delete all marks
nnoremap <leader>mr :delmarks!<CR>:delmark A-Z<CR>:echo "All marks deleted"<CR>

" go to next mark in current buffer
nnoremap <F2> ]`

" go to previous mark in current buffer
nnoremap <S-F2> [`
